"use client";

import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ToolRequest, ToolInputParameter } from '@/src/lib/types'; // Adjust path as needed

interface RefineStructureCardProps {
  proposedToolRequest: ToolRequest; // This is always present when the card is shown
  structureModifications: string[];
  onAddStructureModification: () => void;
  onRemoveStructureModification: (index: number) => void;
  onStructureModificationChange: (index: number, value: string) => void;
  isRefining: boolean;
  onRefineStructure: () => void;
  onAcceptStructure: () => void;
  refineError: string | null;
  // userId is likely needed by onRefineStructure, but handle that in the parent that provides onRefineStructure
}

export default function RefineStructureCard({
  proposedToolRequest,
  structureModifications,
  onAddStructureModification,
  onRemoveStructureModification,
  onStructureModificationChange,
  isRefining,
  onRefineStructure,
  onAcceptStructure,
  refineError,
}: RefineStructureCardProps) {
  return (
    <Card className="bg-slate-700 shadow-xl border-sky-700 border-2 overflow-hidden">
      <CardHeader className="bg-gradient-to-r from-slate-700 to-sky-900">
        <CardTitle className="text-sky-300">Refine Proposed Tool Structure</CardTitle>
        <CardDescription className="text-slate-300">
          Review the structure generated by Quick Start. Add modification requests and click "Refine Structure" or "Accept Structure".
        </CardDescription>
      </CardHeader>
      <CardContent className="flex flex-col gap-4 p-6 bg-slate-800">
        <div className="border border-slate-600 bg-slate-700 p-4 rounded-lg space-y-2 text-sm">
          <h4 className="font-semibold text-sky-300 mb-2">Proposed Structure:</h4>
          <p><strong className="font-medium text-slate-300">Name:</strong> {proposedToolRequest.name}</p>
          <p><strong className="font-medium text-slate-300">Description:</strong> {proposedToolRequest.description}</p>
          <p><strong className="font-medium text-slate-300">Purpose:</strong> {proposedToolRequest.purpose || '(Same as description)'}</p>
          <p><strong className="font-medium text-slate-300">Expected Output:</strong> {proposedToolRequest.expectedOutput}</p>
          <div>
            <p className="font-medium text-slate-300 mb-1">Inputs:</p>
            {Array.isArray(proposedToolRequest.inputs) && proposedToolRequest.inputs.length > 0 ? (
              <ul className="list-disc list-inside pl-4 space-y-1 text-xs">
                {proposedToolRequest.inputs.map((inp: ToolInputParameter, i: number) => (
                  <li key={i} className="text-slate-300">
                    <span className="font-semibold text-sky-400">{inp.name}</span> ({inp.type}) - {inp.description} {inp.required !== false ? <span className="text-red-400">(Required)</span> : '(Optional)'}
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-slate-400 italic text-xs pl-4">No inputs defined.</p>
            )}
          </div>
        </div>

        <div className="border border-slate-600 p-4 rounded-lg space-y-3 bg-slate-700">
          <div className="flex justify-between items-center">
            <Label className="font-semibold text-sky-300">Refinement Requests (Optional)</Label>
            <Button
              variant="outline"
              size="sm"
              onClick={onAddStructureModification}
              disabled={isRefining}
              className="text-xs border-sky-800 bg-slate-800 text-sky-300 hover:bg-slate-600"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M12 5v14M5 12h14"></path></svg>
              Add Request
            </Button>
          </div>
          <p className="text-xs text-sky-400/70">Instruct the AI how to change the structure above (e.g., rename a parameter, make an input optional).</p>
          <div className="space-y-2">
            {structureModifications.map((mod, index) => (
              <div key={index} className="flex items-center gap-2 bg-slate-700 p-2 rounded-md border border-slate-600 shadow-sm">
                <Input
                  type="text"
                  value={mod}
                  onChange={(e) => onStructureModificationChange(index, e.target.value)}
                  placeholder={`e.g., Change 'pdfFilePath' to 'file_url'`}
                  className="flex-grow text-sm bg-slate-800 border-slate-600 text-slate-200"
                  disabled={isRefining}
                />
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onRemoveStructureModification(index)}
                  disabled={isRefining}
                  className="h-8 w-8 p-0 text-sky-400 hover:text-red-400 hover:bg-slate-900/50"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 6 6 18M6 6l12 12"></path></svg>
                  <span className="sr-only">Remove</span>
                </Button>
              </div>
            ))}
            {structureModifications.length === 0 && (
                <div className="flex flex-col items-center justify-center p-4 bg-slate-800/50 rounded-md border border-dashed border-sky-800">
                    <p className="text-sky-300 text-sm mb-2">No refinement requests yet</p>
                    <Button variant="outline" size="sm" onClick={onAddStructureModification} disabled={isRefining} className="text-xs border-sky-800 bg-slate-800 text-sky-300 hover:bg-slate-600">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M12 5v14M5 12h14"></path></svg>
                        Add First Request
                    </Button>
                </div>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-wrap gap-3 items-start p-6 bg-gradient-to-r from-slate-800 to-slate-700">
        <Button onClick={onRefineStructure} disabled={isRefining} className="bg-sky-600 hover:bg-sky-700 text-white">
          {isRefining ? 'Refining...' : 'Refine Structure'}
        </Button>
        <Button variant="secondary" onClick={onAcceptStructure} disabled={isRefining} className="bg-green-700 hover:bg-green-800 text-white">
          Accept Structure & Populate Definition
        </Button>
        {refineError && (
          <div className="text-red-600 border border-red-700 bg-red-900/30 p-3 rounded whitespace-pre-wrap w-full basis-full">
            <strong className="font-semibold">Refine Error:</strong>
            <pre className="mt-1 text-sm">{refineError}</pre>
          </div>
        )}
      </CardFooter>
    </Card>
  );
} 