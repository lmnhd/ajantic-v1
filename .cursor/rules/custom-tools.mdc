---
description: 
globs: 
alwaysApply: false
---
# Custom Tool System Overview

This document outlines the custom tool playground and generation system within the project, as well as how custom tools are loaded for agent orchestration.

## Playground Environment

*   **Playground UI:** [`src/app/playground/custom-tool/page.tsx`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/playground/custom-tool/page.tsx) - Interface for testing, generation, creation, and updating of custom tools.
*   **Playground APIs:** Routes under `src/app/api/playground/` support the UI functions (list, details, execute, generate, create, update, quick-start, refine).
*   **Model Selection:** [`ModelProviderSelect`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/components/global/model-provider-select.tsx) in the UI allows selecting `modelArgs` for generation.

## Core Generation & Registry

*   **Core Logic:** [`src/lib/agent-tools/auto-gen-tool/auto-gen-tool_core.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/auto-gen-tool/auto-gen-tool_core.ts) contains central functions:
    *   `CORE_generateCustomToolDefinition`: Generates/refines tool structure (`name`, `description`, `inputs`, `expectedOutput`) and `implementation` using AI, guided by `ToolRequest` and `modificationRequests`.
    *   `CORE_createToolFromRequest`: Orchestrates generation and registration.
    *   `createFunctionBodyPrompt`: Creates the prompt for the AI, including `modificationRequests`.
*   **Tool Registry:** [`src/lib/agent-tools/tool-registry/registry.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/tool-registry/registry.ts) (`ToolRegistry`) manages persistence (DB interaction) for tool definitions.

## Orchestration Loading & Execution

*   **Loading Entry Point:** The primary mechanism for loading tools (both standard and custom) for agents within the orchestration workflow was refactored. Check functions like `ORCHESTRATION_load_agent_tools` (potentially in [`src/lib/agent-logic/load-agent-tools.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-logic/load-agent-tools.ts) or similar).
*   **Core Loading Function:** The loading process likely relies on `loadToolsAndBuildRegistry` within [`src/lib/agent-tools/auto-gen-tool/auto-gen-tool_core.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/auto-gen-tool/auto-gen-tool_core.ts), which fetches all relevant tool definitions from the `ToolRegistry` and prepares executable versions.
*   **Executable Wrappers:** `CORE_generateDynamicToolWrapper` in the core logic file creates the executable function wrappers (using `ai.tool`) needed for the agent runtime.
*   **In-Memory Registry:** Loaded tools are stored in an in-memory registry (`agentToolsRegistry` in the core file) for efficient access during an agent's session.
*   **Tool Execution:** Actual tool execution within the agent workflow likely involves resolving the tool function from the in-memory registry and potentially using a function like `createToolExecutor` to manage the execution context and arguments.
*   **Agent-Specific Loading:** Be aware that specific agent types (e.g., RESEARCHER, MANAGER) might have slightly different tool loading requirements, including implicit tools.

## Key Data Structures & Schemas

*   **`ToolRequest`** ([`src/lib/types.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/types.ts)): Input for tool generation.
*   **`toolRequestSchema`** (API Routes): Zod schema for validating frontend requests (includes `modificationRequests`, `modelArgs`).
*   **`refinedToolDefinitionSchema`** (Core Logic): Zod schema defining the AI model's expected output format (refined structure + implementation).
*   **`CustomToolDefinition`** ([`src/lib/agent-tools/auto-gen-tool/tool-generator.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/auto-gen-tool/tool-generator.ts)): Interface representing a loaded/stored tool definition.

## Workflow Summary (Playground - Refactored)

1.  **(Optional) Quick Start & Refine Structure:** User interacts with specific UI sections and APIs ([`/api/playground/quick-start-tool`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/quick-start-tool/route.ts), [`/api/playground/refine-tool-structure`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/refine-tool-structure/route.ts)) to generate/refine a `ToolRequest` structure.
2.  **Define/Load Tool:** User populates the main "Tool Definition & Implementation" form ([`page.tsx`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/playground/custom-tool/page.tsx)), potentially loading details from an existing tool. This populates UI state including structure and `implementation`.
3.  **Generate/Regenerate Implementation:**
    *   Button: "Generate/Regenerate Implementation"
    *   Action: Sends current form state (`name`, `description`, `inputs`, `modificationRequests`, etc.), `modelArgs`, and *optionally* the current `implementation` (from UI state) to [`/api/playground/generate-tool-definition`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/generate-tool-definition/route.ts).
    *   Backend: Calls `CORE_generateCustomToolDefinition`. The prompt includes the existing `implementation` if provided, guiding the AI to modify it. Returns the full refined definition + implementation.
    *   Result: Updates the UI form and displays the new implementation. **Does not save to the database.**
4.  **Save as New Tool:**
    *   Button: "Save as New Tool"
    *   Action: Sends the current form state (`name`, `description`, `inputs`) *and* the current `implementation` (from UI state) to [`/api/playground/create-tool`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/create-tool/route.ts).
    *   Backend: **Directly** calls `ToolRegistry.registerTool` to save the provided definition and implementation as a new tool. **No regeneration occurs.**
    *   Result: Creates a new tool record in the database. UI shows success/error.
5.  **Save Updates to Selected Tool:**
    *   Button: "Save Updates to Selected Tool"
    *   Action: Sends the current form state (`name`, `description`, `inputs`) *and* the current `implementation` (from UI state), along with the `toolRef` of the selected tool, to [`/api/playground/update-tool`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/update-tool/route.ts).
    *   Backend: Performs ownership check, then **directly** calls `ToolRegistry.updateTool` to update the existing tool record with the provided definition and implementation. **No regeneration occurs.**
    *   Result: Updates the existing tool record in the database. UI shows success/error.
6.  **Execute Tool:**
    *   Button: "Execute Tool"
    *   Action: Sends `toolRef` and `toolArgs` to [`/api/playground/custom-tool`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/api/playground/custom-tool/route.ts) (POST).
    *   Backend: Uses `ToolRegistry.getToolById` and `ToolFactory.buildTool` to load and execute the tool.
    *   Result: Returns execution result or error to the UI.

## User Scoping & Agent Independence (Recent Refactoring)

The custom tool system has been refactored to be **user-scoped** rather than agent-specific. Key points:

*   **Ownership:** Custom tools are owned by users, identified by the top-level `userId` field in the `CustomTool` database model and the [`ToolRegistryEntry`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/tool-registry/ct-types.ts) interface.
*   **Agent ID Removed:** The previous dependency on an `agentId` (referencing the `AgentComponent` database ID) stored in metadata has been removed from core logic ([`ct-actions.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/tool-registry/ct-actions.ts), [`auto-gen-tool_core.ts`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/lib/agent-tools/auto-gen-tool/auto-gen-tool_core.ts)). Functions like `getToolsForAgent` were removed or refactored.
*   **User Identification:** Agents are identified by `name` (unique per user), not database `id`, as per design choice.
*   **API Requirement:** Playground API routes (`/api/playground/*`) now generally require the `userId` (obtained from Zustand store `useAnalysisStore`'s `localState` in [`page.tsx`](mdc:ajantic-v1/ajantic-v1/ajantic-v1/ajantic-v1/src/app/playground/custom-tool/page.tsx)) to be passed in requests (query params or body) for filtering and authorization.
*   **Global Availability (Per User):** Any tool created by a user is available to any agent operated by that same user, simplifying management and reuse.



